"""
Script d'installation et de configuration pour le syst√®me de surveillance r√©seau
Ex√©cuter ce script pour configurer l'environnement initial
"""

import os
import sys
import subprocess
import sqlite3
from datetime import datetime

def run_command(command, description):
    """Ex√©cute une commande et affiche le r√©sultat"""
    print(f"\nüîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - Succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - Erreur: {e.stderr}")
        return False

def create_env_file():
    """Cr√©e le fichier .env s'il n'existe pas"""
    if not os.path.exists('.env'):
        print("\nüìù Cr√©ation du fichier .env...")
        try:
            with open('.env.example', 'r') as example:
                content = example.read()
            with open('.env', 'w') as env_file:
                env_file.write(content)
            print("‚úÖ Fichier .env cr√©√© avec succ√®s")
            print("‚ö†Ô∏è  Veuillez modifier le fichier .env selon vos besoins")
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation du fichier .env: {e}")
    else:
        print("‚úÖ Fichier .env d√©j√† existant")

def setup_database():
    """Initialise la base de donn√©es"""
    print("\nüóÑÔ∏è  Configuration de la base de donn√©es...")
    try:
        # Cr√©er le r√©pertoire pour la base de donn√©es s'il n'existe pas
        db_dir = os.path.dirname('network_monitoring.db')
        if db_dir and not os.path.exists(db_dir):
            os.makedirs(db_dir)
        
        # Test de connexion √† la base de donn√©es
        conn = sqlite3.connect('network_monitoring.db')
        conn.close()
        print("‚úÖ Base de donn√©es configur√©e avec succ√®s")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la configuration de la base de donn√©es: {e}")
        return False

def add_sample_devices():
    """Ajoute des appareils d'exemple pour tester"""
    print("\nüñ•Ô∏è  Ajout d'appareils d'exemple...")
    try:
        conn = sqlite3.connect('network_monitoring.db')
        cursor = conn.cursor()
        
        # V√©rifier si la table existe
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='devices'")
        if not cursor.fetchone():
            print("‚ö†Ô∏è  Les tables n'existent pas encore. Elles seront cr√©√©es au premier d√©marrage.")
            conn.close()
            return True
        
        # V√©rifier s'il y a d√©j√† des appareils
        cursor.execute("SELECT COUNT(*) FROM devices")
        count = cursor.fetchone()[0]
        
        if count == 0:
            sample_devices = [
                ('Routeur Principal', '192.168.1.1', 'router', 'public'),
                ('Switch Bureau', '192.168.1.10', 'switch', 'public'),
                ('Serveur Web', '192.168.1.100', 'server', 'public'),
            ]
            
            for name, ip, device_type, community in sample_devices:
                cursor.execute("""
                    INSERT INTO devices (name, ip_address, device_type, snmp_community, status, created_at, updated_at)
                    VALUES (?, ?, ?, ?, 'unknown', ?, ?)
                """, (name, ip, device_type, community, datetime.utcnow(), datetime.utcnow()))
            
            conn.commit()
            print(f"‚úÖ {len(sample_devices)} appareils d'exemple ajout√©s")
        else:
            print(f"‚ÑπÔ∏è  {count} appareils d√©j√† pr√©sents dans la base de donn√©es")
        
        conn.close()
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ajout des appareils d'exemple: {e}")
        return False

def main():
    """Fonction principale d'installation"""
    print("üöÄ Installation du Syst√®me de Surveillance R√©seau")
    print("=" * 50)
    
    # V√©rifier Python
    python_version = sys.version_info
    if python_version.major < 3 or (python_version.major == 3 and python_version.minor < 8):
        print("‚ùå Python 3.8+ requis")
        sys.exit(1)
    print(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
    
    # Cr√©er l'environnement virtuel
    if not os.path.exists('venv'):
        success = run_command(f"{sys.executable} -m venv venv", "Cr√©ation de l'environnement virtuel")
        if not success:
            print("‚ùå √âchec de la cr√©ation de l'environnement virtuel")
            sys.exit(1)
    else:
        print("‚úÖ Environnement virtuel d√©j√† existant")
    
    # D√©terminer la commande d'activation selon l'OS
    if os.name == 'nt':  # Windows
        pip_cmd = "venv\\Scripts\\pip"
        python_cmd = "venv\\Scripts\\python"
    else:  # Linux/Mac
        pip_cmd = "venv/bin/pip"
        python_cmd = "venv/bin/python"
    
    # Installer les d√©pendances
    success = run_command(f"{pip_cmd} install -r requirements.txt", "Installation des d√©pendances")
    if not success:
        print("‚ùå √âchec de l'installation des d√©pendances")
        sys.exit(1)
    
    # Cr√©er le fichier .env
    create_env_file()
    
    # Configurer la base de donn√©es
    setup_database()
    
    print("\n" + "=" * 50)
    print("üéâ Installation termin√©e avec succ√®s!")
    print("\nüìã Prochaines √©tapes:")
    print("1. Modifier le fichier .env selon vos besoins")
    print("2. Activer l'environnement virtuel:")
    if os.name == 'nt':
        print("   venv\\Scripts\\activate")
    else:
        print("   source venv/bin/activate")
    print("3. D√©marrer l'application:")
    print("   python run.py")
    print("4. Ouvrir http://localhost:5000 dans votre navigateur")
    print("\nüìñ Consultez le README.md pour plus d'informations")

if __name__ == "__main__":
    main()
